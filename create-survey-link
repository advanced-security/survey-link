#!/usr/bin/env python3

import sys
from datetime import (
  datetime,
  timezone,
  timedelta
)
import os
import json
import urllib.error
import urllib.parse
import urllib.request
from urllib.request import (
  Request,
  HTTPRedirectHandler,
  HTTPDefaultErrorHandler,
  OpenerDirector,
  HTTPSHandler,
  HTTPErrorProcessor,
  UnknownHandler,
)


API_EPOINT = 'https://api.surveymonkey.com/v3'


def now_in_x_days(x: int) -> str:
  return (datetime.now(timezone.utc) + timedelta(days=x)).isoformat()


def paramencode(params: dict):
  return '?' + urllib.parse.urlencode(params, doseq=True, safe="/")


def make_auth():
  return {
    'Authorization': 'Bearer %s' % os.getenv('INPUTS_SURVEYMONKEY_TOKEN'),
  }


def request(
  url: str,
  method: str = "GET",
  headers: dict = {},
  data: bytes = None,
):

  method = method.upper()

  opener = OpenerDirector()
  add = opener.add_handler
  add(HTTPRedirectHandler())
  add(HTTPSHandler())
  add(HTTPDefaultErrorHandler())
  add(HTTPErrorProcessor())
  add(UnknownHandler())

  req = Request(
    url,
    data=data,
    headers=headers,
    method=method,
  )

  with opener.open(req) as resp:
    return (
      resp.status,
      resp.headers,
      resp.read().decode(resp.headers.get_content_charset("utf-8")),
    )


def get_collectors_by_name(survey: int, name: str, ctype: str) -> str:
  for c in list_collectors(survey):
    if c['type'] == ctype and c['name'] == name:
      yield c


def list_collectors(survey: int) -> str:
  params = {
    'per_page': '10000',
    'sort_by': 'name',
    'include': 'status,url',
  }
  url = "%s/surveys/%s/collectors%s" % (API_EPOINT, survey, paramencode(params))
  req_headers = {
    'Accept': 'application/json',
    **make_auth()
  }

  while True:
    _, _, body = request(url, method="get", headers=req_headers)
    body = json.loads(body)
    for r in body['data']:
      yield r

    url = body.get('links', {}).get('next', None)
    if not url:
      break


def change_collector(collector: int, fields: dict) -> str:
  _, _, body = request(
    '%s/collectors/%s' % (API_EPOINT, collector),
    method="patch",
    headers={
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      **make_auth(),
    },
    data=json.dumps(fields).encode(),
  )
  return json.loads(body)


def create_link_collector(survey: int, name: str, days_open: int) -> str:
  _, _, body = request(
    "%s/surveys/%s/collectors" % (API_EPOINT, survey),
    method="post",
    headers={
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      **make_auth(),
    },
    data=json.dumps({
      'type': 'weblink',
      'name': name,
      'thank_you_page': {
        'is_enabled': True,
        'message': 'Thanks! We appreciate your answers, we do not share your information and we hope you will continue to tell us about how we can make GitHub better for you.',
      },
      'close_date': now_in_x_days(days_open),
    }).encode(),
  )
  return json.loads(body)



survey_id, link_name, days_open = sys.argv[1:]
survey_id = int(survey_id)
days_open = int(days_open)


try:
  c = next(get_collectors_by_name(survey_id, link_name, 'weblink'))
  change_collector(
    c['id'],
    {
      'close_date': now_in_x_days(days_open),
      'status': 'open',
    }
  )
except StopIteration:
  c = create_link_collector(survey_id, link_name, days_open)

print(c['url'])
